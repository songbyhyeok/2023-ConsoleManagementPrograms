<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd" >
<configuration>

    <!-- configuration 태그 내에는 11개의 설정 태그를 이용할 수 있다.
              <properties>, <settings>, <typeAliases>, <environments>, <mappers>, <typeHandlers>,
              <objectFactory>, <plugins>, <databaseProvider>, <objectWrapperFactory>, <reflectorFactory>
              이 중에서 자주 사용되는 설정 엘리먼트는 <properties>, <settings>, <typeAliases>, <environments>, <mappers>의 5가지이고,
              상황에 따라 유용하게 사용할 수 있는 엘리먼트는 <typeHandlers>, <objectFactory>, <plugins>의 3가지이다.
    -->


    <!-- 1. <properties> 엘리먼트
                설정 파일에서 공통적인 속성을 정의하거나 외부 파일에서 값을 가져와서 사용해야 하는 경우
                별도의 properties 파일에 작성한 뒤 설정 파일을 읽어와 환경 값을 사용할 수 있다.
                외부 프로퍼티 파일은 resource 하위의 경로를 기술하면 된다.
                클래스패스 경로가 아닌 경우 url속성에 "file:d:\"로 시작하는 경로를 기술하면 된다.
                프로퍼티에 설정된 값을 꺼내올 때는 ${ key } 표현식을 사용한다.
    -->
    <properties resource="config/connection-info.properties"/>



    <!-- 2. <settings> 엘리먼트
                settings 엘리먼트를 사용해서 설정하는 값은 SqlSessionFactory 객체가 SqlSession 객체를 만들 때, 생성할 객체의 특성을 설정한다.
                settings 엘리먼트의 하위 엘리먼트들은 대부분 디폴트값을 가지며, 특별한 경우가 아니면 디폴트값을 사용해도 문제없이 잘 돌아간다.
            =====================================================================================================================
                [ 하위 엘리먼트 (외우지 않아도 된다) ]
                1. <cacheEnabled> : 캐시를 사용할 것인지에 대한 설정이다. (기본값: true)
                2. <lazyLodingEnabled> : 데이터를 한 번에 가져오는 것이 아닌 관련된 데이터를 필요 시점에 가져와 동작하게 하는 옵션(성능개선)이다. (기본값: true)
                3. <aggressiveLazyLoding> : 늦은 로딩을 활성화/비활성화 할 수 있는 옵션이다. (기본값: true)
                4. <multipleResultSetEnabled> : 한 개의 구문에서 여러 개의 결과 셋에 대한 허용여부를 결정하는 옵션이다.  (기본값: true) (지원 안되는 드라이버도 있다)
                5. <useColumnLabel> : 컬럼 이름 대신 컬럼 라벨을 사용할 것인지에 대한 옵션이다. (기본값: true) (드라이버마다 다르다)
                6. <useGeneratedKeys> : 생성키 사용 여부를 결정하는 옵션이다. (기본값: false)
                7. <autoMappingBehavior> : 조회 결과 자동 매핑을 설정하는 옵션이다.  (기본값: PARTIAL) (mapper 태그와 동일하지만 전역 설정이다)
                8. <defaultExecutorType> : statement를 재사용하지 않는 기본값은 SIMPLE, PreparedStatement 재사용은 REUSE, 일괄처리하는 BATCH가 있다.
                9. <defaultStatementTimeout> : 타임아웃에 대한 전역 설정이다. 초단위 양수 설정을 해야 하며 디폴트는 JDBC 드라이버 자체 설정값이다.
                10. <mapUnderscoreToCamelCase> : DB의 언더바를 이용한 네이밍 규칙과 자바의 낙타봉 표현식을 사용해 자동 매핑할지에 대한 옵션이다. (기본값: false)
                11. <localCacheScope> : 캐시 저장 범위를 SqlSession으로 할 때 SESSION, 구문별로 캐시할 때는 STATEMENT를 선택할 수 있다. (기본값: SESSION)
    -->



    <!-- 3. <typeAliases> 엘리먼트
                Mapper에서 클래스 타입을 지정하는 경우 풀클래스명을 작성해야 하는데,
                오타 발생확률 등의 불편함을 해결하기 위해 타입별 별칭을 설정할 수 있다.
                원시 타입이나 흔하게 사용되는 자바 타입에 대해서는 마이바티스 내부에 미리 정의된 별칭이 있다. (레퍼런스문서 참조)
    -->
    <typeAliases>
        <typeAlias type="com.ohgiraffers.section01.config.MenuDTO" alias="Menu"/>
    </typeAliases>



    <!-- 4. <typeHandler> 엘리먼트
                PreparedStatement에서 파라미터를 설정하거나 결과셋을 가져올 때 테이블 각 컬럼을 자바의 적절한 타입으로 설정해서 가져오기 위해 타입 핸들러를 사용한다.
                하지만 대부분 MyBatis 정의한 타입 핸들러가 있기 때문에 대부분의 경우에는 개발자가 별도로 타입 핸들러를 만들 필요가 없다.

         타입핸들러 구현 방법은 생략한다.
         데이터베이스에 저장된 자바 코드를 자바의 ENUM으로 변환하거나 암호화/복호화 처리를 하는데 사용하면 유용하다.
    -->



    <!-- 5. <objectFactory> 엘리먼트
                대부분의 경우 결과셋으로 사용하는 모델을 만들 때 컬럼에 매핑하는 setter 메소드를 호출해서 객체를 만든다.
                하지만 setter 메소드가 없으면 자바의 리플렉션을 사용해서 값을 설정한다.
                테이블간의 관계가 복잡하거나 단순히 setter 메소드를 호출하는 것 이상의 과정을 거쳐야 하는 아주 극소수의 경우 objectFactory를 이용할 수 있다.

         역시 구현은 생략한다.
    -->



    <!-- 6. <plugins> 엘리먼트
                MyBatis가 매핑 구문을 실행하는 과정에서 특정 시점의 처리를 가로채 부가적인 작업을 처리할 수 있다.
                로그를 출력할 수 있고, 파라미터에 대해 공통적으로 타입체크를 하거나, 결과셋에 대한 처리를 추가할 수 있다.
                Spring의 AOP나 인터셉터와 유사하다.

         역시 구현은 생략한다.
    -->



    <!-- 7. <environments> 엘리먼트
                MyBatis의 트랜젝션 관리자와 데이터 소스 두 가지를 설정할 수 있다.
                트랜젝션 관리자와 데이터 소스는 마이바티스만 단독으로 사용할 때는 필요하지만, 스프링 연동 모듈을 사용할 경우 필요 없다. (스프링 설정을 따른다)
                따라서 MyBatis와 스프링을 연동하면 많은 부분이 설정에서 생략이 된다.
    -->
    <environments default="dev">
        <environment id="dev">
            <!-- 7-1. 트랜잭션 관리자
                          - JDBC : MyBatis API에서 제공하는 commit, rollback 메소드 등을 사용해서 트랜젝션을 관리하는 방식이다. (수동 commit)
                          - MANAGED : MyBatis API 보다는 컨테이너가 직접 트랜젝션을 관리하는 방식이다. (자동 commit)
            -->
            <transactionManager type="JDBC" />

            <!-- 7-2. 데이터소스
                          - UNPOOLED : DB에 요청할 때마다 연결을 새롭게 생성하고 처리 후 완전히 해제한다. (성능이 저하된다)
                                       따라서 실제 운영 환경에서는 사용하지 않으며, 간단한 애플리케이션을 테스트할 때를 제외하고는 거의 사용하지 않는다.
                          - POOLED : 일정 수의 DB 연결을 POOL이라는 메모리 영역에 넣어 두고 필요할 때마다 가져다 사용한 뒤, 사용이 끝나면 다시 풀에 반납한다.
                                     매번 DB 연결을 새로 생성하지 않으므로 대부분의 웹 애플리케이션에서 기본적으로 사용한다.
                                     UNPOOLED 방식의 property 설정에 추가적인 property 설정이 가능하다.
                                      - poolMaximumActiveConnections : 설정한 시간 동안 존재할 수 있는 연결의 수이다. (기본값: 10)
                                      - poolMaximumIdleConnection : 주어진 시간에 존재할 수 있는 유휴 연결의 수이다.
                                      - poolMaximumCheckoutTime : 강제로 반환되기 전에 풀에서 체크아웃 될 수 있는 연결 시간이다. (기본값: 20초)
                                      - poolTimeToWait : 풀이 로그 상태를 출력하고 비정상적으로 긴 연결을 다시 얻으려고 시도하는 시간을 설정한다. (기본값: 20초)
                                      - poolPingQuery : 연결이 작업하기 좋은 상태인지 데이터베이스에 던지는 핑 쿼리를 지정한다.
                                      - poolPingEnabled : 연결 상태를 체크하는 핑 쿼리의 사용 여부를 결정한다. (기본값: false)
                                      - poolPingConnectionNotUsedFor : 핑 쿼리를 얼마나 자주 사용할 것인지에 대한 설정이다. (기본값: 0)
                          - JNDI : 디렉토리 서비스를 위해 자바가 제공하는 인터페이스이다. (톰캣 등 대부분의 웹 애플리케이션 서버가 제공한다)
                                   JNDI는 보안상의 이유로 실제 운영환경에서는 자주 사용되지만 개발자가 설정할 일은 거의 없다.
                                   데이터베이스를 관리하는 주체가 자바가 아닌 서버라는 점에서 차이점이 있다.
             -->
            <dataSource type="POOLED">
                <property name="driver" value="${driver}" />
                <property name="url" value="${url}" />
                <property name="username" value="${username}" />
                <property name="password" value="${password}" />
            </dataSource>
        </environment>
    </environments>



    <!-- 8. <mappers> 엘리먼트
                MyBatis에서 가장 중요한 매퍼를 지정하는 엘리먼트이다.
                설정하는 방법은 네 가지가 있지만 한 가지 방식으로 통일하여 관리하는 것이 좋다.
                - <mapper resource=""> : (상대경로) 클래스패스에 위치한 xml 매퍼 파일 지정
                - <mapper url=""> : (절대경로) URL을 사용한 xml 매퍼 파일 지정
                - <mapper class=""> : 매퍼 인터페이스를 사용하는 인터페이스 위치 지정
                - <package name=""> : 패키지 지정으로 패키지 내 자동으로 매퍼 검색
    -->
    <mappers>
        <package name="com.ohgiraffers.section01.xmlmapper"/>
    </mappers>
</configuration>